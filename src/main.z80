        include 'macros.z80'

; JACK STATES
STILL:          equ 0
LEFT:           equ 1
RIGHT:          equ 2
JUMP_1:         equ 3
JUMP_2:         equ 4
JUMP_3:         equ 5
FALLING:        equ 6
CRASH:          equ 7
CRASH_FALL:     equ 8
STUN:           equ 9

; BEGIN
        org     0x100
        ld      sp,.stack

        call    init
setup_game:
        call    setup
main:
        call    menu
game_start:
        call    draw_lines
        call    init_gaps
        call    update_lives
        ld      b,30
        call    tms_delay

;==============================================================================
;       GAME LOOP
;==============================================================================
game_loop:

        ; FRAME 1/4
        call    draw_gaps
        ;call    wait
        call    move_jack
        call    tms_flush_buffer
        call    flush_sprite_attribute_data
        inc8    frame
        call    animate_jack

        ; FRAME 2/4
        call    draw_gaps
        ;call    wait
        call    move_jack
        call    tms_flush_buffer
        call    flush_sprite_attribute_data
        inc8    frame
        call    animate_jack

        ; FRAME 3/4
        call    draw_gaps
        ;call    wait
        call    move_jack
        call    tms_flush_buffer
        call    flush_sprite_attribute_data
        inc8    frame
        call    animate_jack

        ; FRAME 4/4
        call    draw_gaps
        ;call    wait
        call    move_jack
        call    tms_flush_buffer
        call    flush_sprite_attribute_data
        inc8    frame
        call    animate_jack

        ; MOVE GAPS
        ld      ix, gaps
        inc     (ix+0)
        inc     (ix+1)
        inc     (ix+2)
        inc     (ix+3)
        inc8    gaps_right_offset

        dec     (ix+4)
        dec     (ix+5)
        dec     (ix+6)
        dec     (ix+7)
        dec8    gaps_left_offset

        ld      a,(attract_mode)
        or      a
        jr      nz,input
        call    test_fall
        or      a
        jr      z,input         ; not falling.
        ld      a,FALLING
        ld      (jstate),a
        xor     a
        ld      (j_j_fr),a
        jp      game_loop
input:
        call    is_key_pressed
        jp      z,joy_input
        call    get_char
        cp      0x1b
        jp      z,exit_game
joy_input:
        ; if in attract mode, only test for button input
        ld      a,(attract_mode)
        or      a
        jr      z,joy_input_playing
        xor     a
        call    get_joy_status
        and     joy_map_button
        jp      z,game_loop
        xor     a
        ld      (attract_mode),a
        call    tms_clear_screen
        jp      game_start
joy_input_playing:
        ; Don't take any input at all if Jack state is >= JUMP_1
        ld      a,(jstate)
        cp      JUMP_1          ; is jack state >= JUMP_1
        jp      nc,game_loop

        ; read the joystick input
        xor     a
        call    get_joy_status
        ld      c,a
        cp      STILL
        jp      nz,joy_check_left
        ld      a,(jstate)
        cp      STILL
        jp      z,game_loop
        ld      a,STILL
        ld      (jstate),a
        ld      a,SP_STILL
        ld      (jack+PA),a
        xor     a
        ld      (frame),a
        ld      (j_s_fr),a
        jp      game_loop
joy_check_left:
        ld      a,c
        and     joy_map_left
        jr      z,joy_not_left
        ld      a,LEFT
        ld      (jstate),a
        jp      joy_not_right
joy_not_left:
        ld      a,c
        and     joy_map_right
        jr      z,joy_not_right
        ld      a,RIGHT
        ld      (jstate),a
        ; fall through
joy_not_right:
        ld      a,c
        and     joy_map_button
        jp      z,game_loop

        ; fall through
do_jump:
        ; first check line above jack for gap.
        ; if gap directly above jack+YP or jack+YP - 1 then jump is good
        ; else it's crash
        ld      a,(jline)
        or      a
        ret     z
        ld      ix,jack
        dec     a               ; looking at line above
        sla     a
        sla     a
        sla     a
        sla     a
        sla     a       ; << 5
        ld      b,a
        ld      a,(ix+XP)
        srl     a
        srl     a
        srl     a
        or      b
        ld      e,a             ; store gap in E for now.
        ; A is now a gap
        call    test_gap 
        or      a               ; if test gap = 0 then no match so test one to the left
        jr      nz,do_jump_L1   ; else proceed to jump_1
        ld      a,e             ; restore gap from E
        dec     a               ; one to the left
        call    test_gap
        or      a
        jr      z,do_crash      ; if still no match, then crash
do_jump_L1:
        ld      a,JUMP_1
        ld      (jstate),a
        xor     a
        ld      (j_j_fr),a
        jp      game_loop

do_crash:
        ld      a,CRASH
        ld      (jstate),a
        xor     a
        ld      (j_j_fr),a
        jp      game_loop

test_fall:
        ld      a,(jstate)
        cp      STUN            ; okay to fall while stunned.
        jr      z,test_fall_L1
        cp      JUMP_1          ; can not fall if jumping or crashing.
        jr      nc,test_fall_not_falling
test_fall_L1:
        ld      a,(jline)
        cp      8
        jr      z,test_fall_not_falling
        ld      ix,jack
        sla     a
        sla     a
        sla     a
        sla     a
        sla     a
        ld      b,a
        ld      a,(ix+XP)
        srl     a
        srl     a
        srl     a
        or      b
        ld      e,a
        call    test_gap
        or      a
        jr      nz,test_fall_falling
        ld      a,e
        dec     a
        call    test_gap
        or      a
        jr      nz,test_fall_falling
        ; fall through
test_fall_not_falling:
        xor     a
        ret
test_fall_falling:
        ld      a,1
        ret


game_over:
        jp      setup_game

exit_game:
        call    ay_all_off

        call    tms_wait
        call    tms_flush_buffer

        call    cpm_terminate

;==============================================================================
;       LIVES
;==============================================================================
update_lives:
        ld      de,0x0017
        ld      a,0x05
        ld      b,5
update_lives_L1:
        call    set_char_at_loc_buf
        inc     d
        djnz    update_lives_L1

        ld      de,0x0017       ; x=0, y=23
        ld      a,(lives)
        ld      b,a
        ld      a,0x10          ; lives tile
update_lives_L2:
        call    set_char_at_loc_buf
        inc     d
        djnz    update_lives_L2
        ret


;==============================================================================
;       JACK MOVEMENT
;==============================================================================


move_jack:
        ld      a,(jstate)
        rlca
        rlca                    ; Mult by 4 / A is now either 0, 4, 8 or 12
        ld      (move_jack_jump_table + 1), a ; jump offset (self modifying)
move_jack_jump_table:
        jr      move_jack_jump_table
        jp      move_jack_still
        nop
        jp      move_jack_left
        nop
        jp      move_jack_right
        nop
        jp      move_jack_jump_good_1
        nop
        jp      move_jack_jump_good_2
        nop
        jp      move_jack_jump_good_3
        nop
        jp      move_jack_falling
        nop
        jp      move_jack_crash
        nop
        jp      move_jack_crash_fall
        nop
        jp      move_jack_stun


move_jack_still:
        ret

move_jack_left:
        ld      a,(jack+XP)
        sub     2
        ld      (jack+XP),a
        ret

move_jack_right:
        ld      a,(jack+XP)
        add     2
        ld      (jack+XP),a
        ret

move_jack_jump_good_1:
        ld      a,(jack+YP)
        sub     2
        ld      (jack+YP),a
        ret
move_jack_jump_good_2:
        ld      a,(jack+YP)
        sub     2
        ld      (jack+YP),a
        ret
move_jack_jump_good_3:
        ld      a,(jack+YP)
        sub     2
        ld      (jack+YP),a
        ret

move_jack_falling:
        ld      a,(jack+YP)
        add     2
        ld      (jack+YP),a
        ret
move_jack_crash:
        ld      a,(jack+YP)
        sub     2
        ld      (jack+YP),a
        ret
move_jack_crash_fall:
        ld      a,(jack+YP)
        add     2
        ld      (jack+YP),a
        ret
move_jack_stun:
        ret

;==============================================================================
;       JACK ANIMATION
;==============================================================================

animate_jack:
        ld      a,(jstate)
        rlca
        rlca                    ; Mult by 4 / A is now either 0, 4, 8 or 12
        ld      (animate_jack_jump_table + 1), a ; jump offset (self modifying)
animate_jack_jump_table:
        jr      animate_jack_jump_table
        jp      anim_jack_still
        nop
        jp      anim_jack_left
        nop
        jp      anim_jack_right
        nop
        jp      anim_jack_jump_good_1
        nop
        jp      anim_jack_jump_good_2
        nop
        jp      anim_jack_jump_good_3
        nop
        jp      anim_jack_falling
        nop
        jp      anim_jack_crash
        nop
        jp      anim_jack_crash_fall
        nop
        jp      anim_jack_stun

; Jack turns his head every 32 frames
anim_jack_still:
        ld      a,(frame)       ; if frame % 32 != return
        and     0x20
        ret     z
                                ; else
        ld      a,(j_s_fr)
        rlca
        rlca                    ; x 4
        add     SP_STILL        ; add to first frame of still sequence
        ld      (jack+PA),a     ; save to sprite pattern
        inc8    j_s_fr          ; increment the still frame counter
        ld      a,(j_s_fr)      ; make sure it's a % 4
        and     0x03
        ld      (j_s_fr),a
        xor     a
        ld      (frame),a
        ret

anim_jack_left:
        ld      a,(frame)
        and     0x01
        ret     nz
        ld      a,(j_r_fr)
        rlca
        rlca
        add     SP_LEFT
        ld      (jack+PA),a
        inc8    j_r_fr
        ld      a,(j_r_fr)
        and     0x03
        ld      (j_r_fr),a
        ret

        ret

anim_jack_right:
        ld      a,(frame)
        and     0x01
        ret     nz
        ld      a,(j_r_fr)
        rlca
        rlca
        add     SP_RIGHT
        ld      (jack+PA),a
        inc8    j_r_fr
        ld      a,(j_r_fr)
        and     0x03
        ld      (j_r_fr),a
        ret

        ret

anim_jack_jump_good_1:
        ld      a,(j_j_fr)
        rlca
        rlca
        add     SP_JUMP
        ld      (jack+PA),a
        inc8    j_j_fr
        ld      a,(j_j_fr)
        cp      0x04            ; are we ready to switch to good_jump_2?
        ret     nz
        ld      a,JUMP_2
        ld      (jstate),a
        xor     a
        ld      (j_j_fr),a
        ret

anim_jack_jump_good_2:
        inc8    j_j_fr
        ld      a,(j_j_fr)
        cp      0x04            ; are we ready to switch to good_jump_2?
        ret     nz
        ld      a,JUMP_3
        ld      (jstate),a
        xor     a
        ld      (j_j_fr),a
        ret

anim_jack_jump_good_3:
        inc8    j_j_fr
        ld      a,(j_j_fr)
        cp      0x04            ; are we ready to switch to good_jump_2?
        ret     nz
        ld      a,STILL
        ld      (jstate),a
        xor     a
        ld      (j_j_fr),a
        ld      (j_s_fr),a
        dec8    jline
        ld      a,(jline)
        or      a
        jp      z,game_over
        ld      a,SP_STILL
        ld      (jack+PA),a
        xor     a
        ld      (frame),a
        ld      (j_s_fr),a
        jp      new_gap

anim_jack_falling:
        ld      a,(j_j_fr)
        rlca
        rlca
        add     SP_FALL
        ld      (jack+PA),a
        inc8    j_j_fr
        ld      a,(j_j_fr)
        cp      0x04            ; fall animation only lasts 4 frames. 
        ret     c               ; animation remains static until 12 frames have passed.
        cp      12
        ret     nz
        ld      a,STUN
        ld      (jstate),a
        ld      a,SP_STUN
        ld      (jack+PA),a
        xor     a
        ld      (j_j_fr),a
        ld      a,16
        ld      (stun_ctr),a
        inc8    jline
        ld      a,(jline)
        cp      8
        ret     nz
        dec8    lives
        ld      a,(lives)
        or      a
        jp      z,game_over
        jp      update_lives

anim_jack_crash:
        ld      a,(frame)
        and     0x01
        ret     nz
        ld      a,(j_j_fr)
        rlca
        rlca
        add     SP_CRASH
        ld      (jack+PA),a
        inc8    j_j_fr
        ld      a,(j_j_fr)
        cp      0x04            ; are we ready to switch to good_jump_2?
        ret     nz
        ld      a,CRASH_FALL
        ld      (jstate),a
        ld      a,SP_STUN
        ld      (jack+PA),a
        xor     a
        ld      (j_j_fr),a
        ret

anim_jack_crash_fall:
        ld      a,(frame)
        and     0x01
        ret     nz
        ld      a,(j_j_fr)
        rlca
        rlca
        add     SP_STUN
        ld      (jack+PA),a
        inc8    j_j_fr
        ld      a,(j_j_fr)
        cp      0x04            ; are we ready to switch to good_jump_2?
        ret     nz
        ld      a,STUN
        ld      (jstate),a
        xor     a
        ld      (j_j_fr),a
        ld      a,32
        ld      (stun_ctr),a
        ret

anim_jack_stun:
        ld      a,(frame)
        and     0x01
        ret     nz
        ld      a,(stun_ctr)
        and     0x03
        rlca
        rlca
        add     SP_STUN
        ld      (jack+PA),a
        dec8    stun_ctr
        ld      a,(stun_ctr)
        or      a
        ret     nz
        ld      a,STILL
        ld      (jstate),a
        ld      a,SP_STILL
        ld      (jack+PA),a
        xor     a
        ld      (frame),a
        ld      (j_s_fr),a
        ret


;==============================================================================
;       GAPS AND LINES
;==============================================================================


; INPUT: E=Y
draw_line:
        ld      b, 0x20
        ld      a, 0x01
.line_char:
        call    set_char_at_loc_buf
        inc     d
        djnz    .line_char
        ret
; INPUT: VOID
draw_lines:
        ld      de,0x0000
        call    draw_line
        ld      de,0x0003
        call    draw_line
        ld      de,0x0006
        call    draw_line
        ld      de,0x0009
        call    draw_line
        ld      de,0x000c
        call    draw_line
        ld      de,0x000f
        call    draw_line
        ld      de,0x0012
        call    draw_line
        ld      de,0x0015
        jp      draw_line

; Test if gap given in A matches with any gap.
; INPUT: A is the gap to test
; OUTPUT: A = 0 No match
;         A = 1 Match
test_gap:
        ld      d,a
        ld      b,8
        ld      hl,gaps
test_gap_L1:
        ld      a,(hl)
        cp      d
        jr      z,test_gap_L2   ; match
        inc     hl
        djnz    test_gap_L1
        xor     a
        ret
test_gap_L2:
        ld      a,1
        ret

; Convert gap coordinate system to xy coordinates
; LLLXXXXX -> LLL x 3 = Y, XXXX = X
; INPUT: A = gap
; OUTPUT: D = X, E = Y
gap_to_xy:
        push    bc
        push    af      ; save A
        srl     a
        srl     a
        srl     a
        srl     a
        srl     a       ; LLL >> 5
        ld      b,a     ; x 3
        add     a,a
        add     a,b
        ld      e,a     ; E = Y

        pop     af
        and     0x1F
        ld      d,a     ; D = X
        pop     bc
        ret

init_gaps:
        call    random
        ld      (gaps+0),a
        ld      (gaps+1),a
        ld      (gaps+2),a
        ld      (gaps+3),a
        call    random
        ld      (gaps+4),a
        ld      (gaps+5),a
        ld      (gaps+6),a
        ld      (gaps+7),a
        ret

new_gap:
        ld      a,(gap_ctr)
        cp      6
        ret     z
        ld      hl,gaps
        addhla
        call    random
        ld      b,a
        ld      a,(gap_ctr)
        cp      4
        jr      c,new_gap_offset_right
        ld      a,(gaps_left_offset)
        jr      new_gap_return
new_gap_offset_right:
        ld      a,(gaps_left_offset)
new_gap_return:
        add     a,b
        ld      (hl),a
        inc8    gap_ctr
        ret

draw_gaps:
        ld      a,(frame)
        and     0x03
        rlca
        rlca                ; Mult by 4 / A is now either 0, 4, 8 or 12
        ld      (draw_gaps_jump_table + 1), a ; jump offset (self modifying)
draw_gaps_jump_table:
        jr      draw_gaps_jump_table
        jp      gaps_F0
        nop
        jp      gaps_F1
        nop
        jp      gaps_F2
        nop
        jp      gaps_F3

gaps_F0:
        ld      b,0x08  ; number of gaps to draw
        ld      hl,gaps+0 ; pointer to gaps
gaps_F0_L1:
        ; CELL 0
        ld      a,(hl)
        dec     a       ; offset for Cell 0
        call    gap_to_xy
        ld      a,0x01  ; tile with full line
        call    set_char_at_loc_buf
        ; CELL 4
        ld      a,(hl)
        add     a,0x03    ; offset for cell 4
        call    gap_to_xy
        ld      a,0x01  ; tile with full line
        call    set_char_at_loc_buf
        inc     hl
        djnz    gaps_F0_L1

        ; now draw the gaps between
        ld      b,0x08
        ld      hl,gaps+0
gaps_F0_L2:
        ; CELL 1
        ld      a,(hl)
        call    gap_to_xy ; no offset for cell 1
        ld      a,0x05  ; tile with empty line
        call    set_char_at_loc_buf
        ; CELL 2
        ld      a,(hl)
        inc     a
        call    gap_to_xy
        ld      a,0x05
        call    set_char_at_loc_buf
        ; CELL 3
        ld      a,(hl)
        inc     a
        inc     a
        call    gap_to_xy
        ld      a,0x05
        call    set_char_at_loc_buf
        ; LOOP
        inc     hl
        djnz    gaps_F0_L2

        ret
gaps_F1:
        ld      ix,gap_frame_data
        ld      (ix+0),4        ; cell 1
        ld      (ix+1),6        ; cell 3
        ld      (ix+2),8        ; cell 4
        ld      (ix+3),2        ; cell 0
        jp      gaps_F123
gaps_F2:
        ld      ix,gap_frame_data
        ld      (ix+0),3
        ld      (ix+1),7
        ld      (ix+2),7
        ld      (ix+3),3
        jp      gaps_F123
gaps_F3:
        ld      ix,gap_frame_data
        ld      (ix+0),2
        ld      (ix+1),8
        ld      (ix+2),6
        ld      (ix+3),4
        ; fall through
gaps_F123:
        ; draw cell 1 in gaps 0-3 (right down gaps)
        ld      b,4
        ld      hl,gaps
gaps_F123_L1:
        ld      a,(hl)
        call    gap_to_xy
        ld      a,(ix+0)
        call    set_char_at_loc_buf
        inc     hl
        djnz    gaps_F123_L1

        ; Draw Cell 3 in gaps 4-7 (the Left/Up gaps)
        ld      b,4
        ld      hl,gaps+4
gaps_F123_L2:
        ld      a,(hl)
        inc     a
        inc     a
        call    gap_to_xy
        ld      a,(ix+1)
        call    set_char_at_loc_buf
        inc     hl
        djnz    gaps_F123_L2

        ; Draw gaps 0-3 (the Right/Down gaps)
          ; For each, AND the desired contents of cells 1 & 4 with what's
          ; already on the screen to allow for overlapping left-moving
          ; gaps.
        ld      b,4
        ld      hl,gaps
gaps_F123_L3:
        ld      a,(ix+0)        ; desired pattern cell 1
        ld      c,a
        ld      a,(hl)          ; cell 1 has no offset
        call    gap_and_update
        ld      a,(ix+2)        ; desired pattern cell 4
        ld      c,a
        ld      a,(hl)
        inc     a               ; offset for cell 4
        inc     a
        inc     a
        call    gap_and_update
        ld      a,(hl)
        inc     a               ; offset for cell 2
        push    af
        call    gap_to_xy
        ld      a,0x05          ; empty cell
        call    set_char_at_loc_buf
        pop     af
        inc     a
        call    gap_to_xy
        ld      a,0x05          ; empty cell
        call    set_char_at_loc_buf

        inc     hl
        djnz gaps_F123_L3

        ; Draw gaps 4-7 (the Left/Up gaps)
          ; For each, AND the desired contents of cells 0 & 3 with what's
          ; already on the screen to allow for overlapping right-moving
          ; gaps.
        ld      b,4
        ld      hl,gaps+4
gaps_F123_L4:
        ld      a,(ix+3) ; desired pattern cell 0
        ld      c,a
        ld      a,(hl)
        dec     a               ; cell 0 offset
        call    gap_and_update
        ld      a,(ix+1) ; desired pattern cell 3
        ld      c,a
        ld      a,(hl)
        inc     a
        inc     a          ; offset for cell 3
        call    gap_and_update
        ld      a,(hl)          ; cell 1 has no offset
        push    af
        call    gap_to_xy
        ld      a,0x05          ; empty cell
        call    set_char_at_loc_buf
        pop     af
        inc     a
        ld      a,0x05          ; empty cell
        call    set_char_at_loc_buf

        inc     hl
        djnz    gaps_F123_L4

        ret

; INPUT: A = position
;        C = desired pattern

gap_and_update:
        push    hl      ; save pointer to gaps
        push    af      ; save the location
        call    gap_to_xy
        call    get_char_at_loc_buf; character on the screen
        rlca    ; times 2 for index into lookup table
        ld      hl, gap_and_idx
        addhla
        ld      e,(hl)
        inc     hl
        ld      d,(hl)  ; DE points to table we need to look up now.
        ex      de, hl  ; HL points to the table we need to look up now.
        ld      a,c     ; use desired pattern to lookup the new pattern
        addhla
        pop     af      ; restore the location
        call    gap_to_xy
        ld      a,(hl)
        call    set_char_at_loc_buf
        pop     hl      ; restore pointer to gaps
        ret



;==============================================================================
;       GLOBAL VARIABLES
;==============================================================================


str_menu_1:     db "Jumping Jack",0
str_menu_2:     db "By Productiondave",0
str_menu_3:     db "v1.0 - 2024",0
str_menu_4:     db "Button to start",0
str_menu_5:     db "Escape to quit",0

attract_mode:   db 1    ; 0 = PLAYING, 1 = ATTRACT MODE

lives:          db 5

frame:          db 0
j_s_fr:         db 0
j_r_fr:         db 0
j_j_fr:         db 0

jstate:         db STILL
jline:          db 8    ; jack starts on bottom of screen.  This is line 8.
stun_ctr:       db 0
gap_ctr:        db 0    ; number of gaps on the screen.  Max = 8

gaps:
        db 0x00     ; right down
        db 0x00     ; right down
        db 0x00     ; right down
        db 0x00     ; right down

        db 0x00     ; left up
        db 0x00     ; left up
        db 0x00     ; left up
        db 0x00     ; left up

gaps_right_offset: db 0
gaps_left_offset:  db 0

gap_frame_data:
        db 0        ; Cell 1 (Right-moving gaps)
        db 0        ; Cell 3 (Left-moving gaps)
        db 0        ; Cell 4 (Right-moving gaps)
        db 0        ; Cell 0 (Left-moving gaps)

gap_and_idx:
        dw   gap_zeros
        dw   gap_ones
        dw   gap_twos
        dw   gap_threes
        dw   gap_fours
        dw   gap_fives
        dw   gap_sixes
        dw   gap_sevens
        dw   gap_eights
        dw   gap_nines
        dw   gap_tens
        dw   gap_elevens

gap_zeros:
        db 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
gap_ones:
        db 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11
gap_twos:
        db 0, 2, 2, 3, 4, 5, 5, 9,11, 9,10,11
gap_threes:
        db 0, 3, 3, 3, 4, 5, 5, 5,10, 5,10,10
gap_fours:
        db 0, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5
gap_fives:
        db 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
gap_sixes:
        db 0, 6, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5
gap_sevens:
        db 0, 7, 9, 5, 5, 5, 6, 7, 7, 9, 5, 9
gap_eights:
        db 0, 8,11,10, 5, 5, 6, 7, 8, 9,10,11
gap_nines:
        db 0, 9, 9, 5, 5, 5, 5, 9, 9, 9, 5, 9
gap_tens:
        db 0,10,10,10, 5, 5, 5, 5,10, 5,10,10
gap_elevens:
        db 0,11,11,10, 5, 5, 5, 9,11, 9,10,11


;==============================================================================
;       INCLUDES
;==============================================================================



; includes platform
        include "platform.z80"
; include standard libraries
        include "stdlib.z80"
        include "stdio.z80"
        include "tms.z80"
        include "strings.z80"
; include game libraries
        include "setup.z80"
        include "sprites.z80"
        include "sprite_patterns.z80"
        include "tile_patterns.z80"
        include "menu.z80"

;==============================================================================
;       STACK
;==============================================================================


        ds      1024
.stack: equ     $
